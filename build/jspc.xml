<?xml version="1.0"?>
<project default="jspc">
	<!--
		Generally speaking there's no need to precompile jsp's. Jasper is 
		fairly quick and efficient anyways so dynamic compilation is fine
		and offers the ability to change things on the fly. The reason 
		we want to statically compile here is just for the sake of 
		error checking, i.e. catching jsp's that don't compile - at compile
		time rather than at run time. This will also help for automated
		build systems like Hudson to check that the commited jsp's compile.
		
		REQUIRES:
		This build script requires that the normal build be run and 
		the expectation is that oscar/build/tmp/oscar.war was built and exists.
		This script requires the environment variable CATALINA_HOME to be set,
		this was tested against tomcat 6.0.18 and requires a version that
		has the jasper compiler in it (5.0 versions did not).
	-->

	<property environment="env" />
	<property name="catalina.home" location="${env.CATALINA_HOME}" />
	<echo message="Using CATALINA_HOME=${catalina.home}" />
	<import file="${catalina.home}/bin/catalina-tasks.xml" />

	<property name="jspcDir" location="tmp/jspc" />
	<property name="jspc.expandedWarDir" value="${jspcDir}/web" />
	<property name="jspc.generatedDir" value="${jspcDir}/generated_jsp_classes" />

	<target name="jspc">
		<!--
		The general algorithm is as follows :
		1) setup a clean working area
		2) unzip the oscar.war
		3) compile jsp's into java source
		4) compile java source into class files
		-->

		<antcall target="jspc.clean" />
		<unwar src="tmp/oscar.war" dest="${jspc.expandedWarDir}" />

		<condition property="tomcat.lib" value="${catalina}/lib">
			<available file="${catalina}/lib" type="dir" />
		</condition>
		<condition property="tomcat.lib" value="${catalina}/common/lib">
			<available file="${catalina}/common/lib" type="dir" />
		</condition>
		<property name="tomcat.lib.dir" location="${tomcat.lib}" />

		<!-- ant-contrib needed for the if statements -->
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		  <classpath>
		    <pathelement location="tasks/lib/ant-contrib-1.0b3.jar"/>
		  </classpath>
		</taskdef>

		<if>
			<!-- tomcat 5.5 uses jasper2 where as tomcat 6 uses jasper -->
			<equals arg1="${tomcat.lib.dir}" arg2="${catalina}/lib" />
			<then>
				<jasper uriroot="${jspcDir}/web" webXmlFragment="${jspcDir}/generated_web.xml" outputDir="${jspc.generatedDir}" validateXml="false" failOnError="false" />
			</then>
			<else>
				<jasper2 uriroot="${jspcDir}/web" webXmlFragment="${jspcDir}/generated_web.xml" outputDir="${jspc.generatedDir}" validateXml="false" failOnError="false" />
			</else>
		</if>

		<javac srcdir="${jspc.generatedDir}" source="1.5" target="1.5" debug="on">
			<classpath>
				<pathelement location="${jspc.expandedWarDir}/WEB-INF/classes" />
				<fileset dir="${jspc.expandedWarDir}/WEB-INF/lib">
					<include name="*.jar" />
				</fileset>
				<!-- for tomcat 5.5 change the below from "}/lib" to "}/common/lib" -->
				<fileset dir="${tomcat.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${catalina.home}/bin">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<!-- we will allow this exclusion because this is not our code and is just included code from another library, this will allow upgrades to be  easier if  we don't change other people's library code. -->
			<exclude name="org/apache/jsp/jspspellcheck/**" />
		</javac>
	</target>

	<target name="jspc.clean">
		<delete dir="${jspcDir}" quiet="true" />
	</target>

</project>
