This document out lines how we'll user gerrit in our work flow.

-------
purpose
-------
	- do a little better than our current cvs/no-review model
	- very little overhead
	- not something extensive / complex 

----------------------------
Installation & Configuration
----------------------------

Summary / Intent
----------------
- use openId for web user control
- use ssh for repository commit user control
- have a new group called approvers
	- only a few people on here like 2
	- approvers are the only ones with submit access
- registered users only have 0/-1 code review
- get rid of verified status requirement


Details
-------
Prerequisite
- Have a server & linux user for gerrit & downloaded gerrit-2.1.5.war & java 1.6 installed & mysql installed

Steps

Install Gerrit (on the server)
- Create a mysql database called "reviewdb" and a user/password for gerrit to use.
- we'll use the users home directory as working directory open a terminal to the users home directory
- run "java -jar gerrit-2.1.5.war init -d review_site", from here on accept the defaults if not mentione here
- at "Sql Database", enter "mysql" instead.
- at "SMTP server hostname", enter either a mcmaster or google smtp server information, gmails's example maybe : smtp.gmail.com:465, ssl
- at "Canonical Url", enter the proper hostname / url for your server
- change your linux to start gerrit upon boot up. To start gerrit : "cd ~/review_site", "./bin/gerrit.sh start". Note the funny directory change / reference in the preceeding 2 commands, it has to be that way or gerrit doesn't figure out where it's installed. (You can configure more to make it work but the prior 2 commands is the easiest way).
- Note that we have accepted the default ports 8080 and 29418, I see no reason to change these.
- At this point, gerrit may or may not have auto started itself, check the ps listing to find out. Start gerrit if you have to.


Configure Gerrit (from your client / developer machine)
- goto "http://127.0.0.1:8080" (or what ever host name you need to use.)
- on the top right click on register. Select one of the methods to register/login, I'm using my google ID "r6squeegee@gmail.com" in this example. Note the first user to register is an administrator, everyone else after is a regular user.
	- For "Full Name" enter the persons name and click "save changed" (yes you actually need to click that now).
	- For "select a unique username" this will become your ssh access username, we might want to state that it's your email address (before the @ sign) as a standard. You need to click "select username" now.
	- For "Register an SSH public key" : if you already know or have SSH keys you can just provide it, otherwise do the following : 
		- on your client machine / developer machine : "ssh-keygen -t rsa", do not enter a password when it asks. This means... if you machine is compromised, your gerrit user is compromised and the corresponding server key should be deleted.
		- now cut and paste the contents of "~/.ssh/id_rsa.pub" into the text area on the web page.
		- click add and it should list it as an added key on the screen.
	- now on the bottom of the screen there's a link that says "continue" click that, now you should be at the your "code review dashboard" screen.
- on the top left of the screen, click on admin -> groups. Create a new group called "code_approvers"
- on the top left of the screen, click on admin -> projects. Then select "all projects", then select "access".
	// - add the new permissions category="Verified", group name="code_approvers", range=-1 to +1
	- add the new permissions category="submit", group name="code_approvers", range=+1

Add a project (from client / developer machine)
- from the command line, do a "ssh -p 29418 r6squeegee@127.0.0.1 gerrit create-project --name foo" (where foo is your project name).
- now you'll want to clone the project in your favourite git tool, and commit & push all the previous files / existing code that's being ported.